controller:
  publishService:
    enabled: true
  extraArgs:
    enable-ssl-passthrough: ""
  config:
    client-body-buffer-size: 500M
    client-header-buffer-size: 500M
    http2-max-field-size: 500M
    http2-max-header-size: 500M
    proxy-body-size: 20M
    client-body-timeout: "360"
    client-header-timeout: "360"
    proxy-connect-timeout: "360"
    proxy-read-timeout: "360"
    proxy-send-timeout: "360"
    ssl-protocols: "TLSv1.1 TLSv1.2 TLSv1.3"
    ssl-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA"

  ingressClass: nginx
  containerPort:
    http: 80
    https: 443
  service:
    targetPorts:
      http: http
      https: https
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
      service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
      service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 70
  resources:
    limits:
     cpu: 400m
     memory: 1000Mi
    requests:
      cpu: 50m
      memory: 250Mi

  metrics:
    port: 10254
    # if this port is changed, change healthz-port: in extraArgs: accordingly
    enabled: true

    service:
      annotations: {}
      # loadBalancerIP: ""
      loadBalancerSourceRanges: []
      servicePort: 9913
      type: ClusterIP

    serviceMonitor:
      enabled: false
      additionalLabels: 
        release: kube-prometheus-stack
      namespace: monitoring
      namespaceSelector: {}
      scrapeInterval: 30s
      # honorLabels: true
      targetLabels: []
      metricRelabelings: []

    prometheusRule:
      enabled: false
      additionalLabels:
        # release: prometheus
        app: kube-prometheus-stack
        release: kube-prometheus-stack
      namespace: monitoring
      rules: 
        - alert: TooMany500s
          expr: 100 * ( sum(increase(nginx_ingress_controller_requests{status=~"5.+"}[5m])) by (ingress)  / sum(increase(nginx_ingress_controller_requests[5m])) by (ingress) ) > .005
          for: 1m
          labels:
            severity: critical
          annotations:
            description: Too many 5XXs in {{ $labels.ingress }}
            summary: More than 0.005% of the all requests did return 5XX, this require your attention -- {{ $labels.ingress }}
        - alert: TooMany400s
          expr: (100 * ( sum(increase(nginx_ingress_controller_requests{status=~"4.+", ingress !~"wordpress", ingress !~"website"}[5m])) by (ingress)  / sum(increase(nginx_ingress_controller_requests[5m])) by (ingress) ) > 30) and (sum(increase(nginx_ingress_controller_requests{status=~"4.+"}[5m])) by (ingress) > 20)
          for: 1m
          labels:
            severity: critical
          annotations:
            description: Too many 4XXs in {{ $labels.ingress }}
            summary: More than 30 of the all requests did return 4XX and count of 4xx was more than 5, this require your attention -- {{ $labels.ingress }}
